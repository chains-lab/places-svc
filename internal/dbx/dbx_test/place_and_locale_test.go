package dbx_test

import (
	"context"
	"database/sql"
	"testing"
	"time"

	"github.com/chains-lab/places-svc/internal/dbx"
	"github.com/google/uuid"
	_ "github.com/lib/pq"
	"github.com/paulmach/orb"
)

func insertBaseKindInfra(t *testing.T) {
	t.Helper()
	db := openDB(t)
	now := time.Now().UTC()

	// category
	if err := dbx.NewCategoryQ(db).Insert(context.Background(), dbx.PlaceCategory{
		Code:      "food",
		Status:    "active",
		Icon:      "üçî",
		CreatedAt: now, UpdatedAt: now,
	}); err != nil {
		t.Fatalf("insert category: %v", err)
	}
	// kind
	if err := dbx.NewPlaceKindsQ(db).Insert(context.Background(), dbx.PlaceKind{
		Code:         "restaurant",
		CategoryCode: "food",
		Status:       "active",
		Icon:         "üçΩÔ∏è",
		CreatedAt:    now, UpdatedAt: now,
	}); err != nil {
		t.Fatalf("insert kind: %v", err)
	}
	// kind i18n (en fallback)
	if err := dbx.NewKindLocaleQ(db).Insert(context.Background(), dbx.PlaceKindLocale{
		KindCode: "restaurant", Locale: "en", Name: "Restaurant",
	}); err != nil {
		t.Fatalf("insert kind en: %v", err)
	}
}

func insertPlace(t *testing.T, id uuid.UUID) {
	t.Helper()
	db := openDB(t)
	now := time.Now().UTC()
	err := dbx.NewPlacesQ(db).Insert(context.Background(), dbx.Place{
		ID:            id,
		CityID:        uuid.New(),
		DistributorID: uuid.NullUUID{}, // NULL
		TypeCode:      "restaurant",
		Status:        "active",
		Verified:      true,
		Ownership:     "private",
		Point:         orb.Point{30.5234, 50.4501}, // Kyiv
		Website:       sql.NullString{Valid: true, String: "https://example.test"},
		Phone:         sql.NullString{}, // NULL
		CreatedAt:     now,
		UpdatedAt:     now,
	})
	if err != nil {
		t.Fatalf("insert place: %v", err)
	}
}

func insertPlaceLocale(t *testing.T, placeID uuid.UUID, locale, name, addr string, desc sql.NullString) {
	t.Helper()
	db := openDB(t)
	err := dbx.NewPlaceDetailsQ(db).Insert(context.Background(), dbx.PlaceLocale{
		PlaceID:     placeID,
		Locale:      locale,
		Name:        name,
		Address:     addr,
		Description: desc,
	})
	if err != nil {
		t.Fatalf("insert place_i18n %s: %v", locale, err)
	}
}

func setupPlaceWithInfra(t *testing.T) (db *sql.DB, ctx context.Context, placeID uuid.UUID) {
	t.Helper()
	setupClean(t)          // –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç–µ—Å—Ç–æ–≤
	insertBaseKindInfra(t) // —Å–æ–∑–¥–∞—ë—Ç category/kind: category "infra", kind "power_station" (–ø—Ä–∏–º–µ—Ä)
	db = openDB(t)
	ctx = context.Background()
	placeID = uuid.New()
	insertPlace(t, placeID) // –≤—Å—Ç–∞–≤–ª—è–µ—Ç –±–∞–∑–æ–≤—ã–π place —Å type_code –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π kind
	return
}

// ---------- tests ----------

func TestPlaces_WithLocale_CRUD_Fallback(t *testing.T) {
	setupClean(t)
	insertBaseKindInfra(t)

	db := openDB(t)
	ctx := context.Background()

	placeID := uuid.New()
	insertPlace(t, placeID)

	// en –±–∞–∑–æ–≤–∞—è –ª–æ–∫–∞–ª—å (fallback)
	insertPlaceLocale(t, placeID, "en", "Coffee House", "Main St 1", sql.NullString{Valid: true, String: "Cozy place"})
	// uk –ª–æ–∫–∞–ª—å
	insertPlaceLocale(t, placeID, "uk", "–ö–∞–≤ º—è—Ä–Ω—è", "–≤—É–ª. –ì–æ–ª–æ–≤–Ω–∞, 1", sql.NullString{Valid: false})

	// 1) exact: WithLocale("uk")
	got, err := dbx.NewPlacesQ(db).WithLocale("uk").FilterByID(placeID).Get(ctx)
	if err != nil {
		t.Fatalf("get with uk: %v", err)
	}
	if got.Locale.Locale != "uk" || got.Locale.Name != "–ö–∞–≤ º—è—Ä–Ω—è" || got.Locale.Address != "–≤—É–ª. –ì–æ–ª–æ–≤–Ω–∞, 1" || got.Locale.Description.Valid {
		t.Fatalf("expected uk locale with name/address and empty description, got: %+v", got.Locale)
	}

	// 2) fallback: WithLocale("fr") ‚Üí en
	got, err = dbx.NewPlacesQ(db).WithLocale("fr").FilterByID(placeID).Get(ctx)
	if err != nil {
		t.Fatalf("get with fr (fallback): %v", err)
	}
	if got.Locale.Locale != "en" || got.Locale.Name != "Coffee House" || got.Locale.Address != "Main St 1" || !got.Locale.Description.Valid || got.Locale.Description.String != "Cozy place" {
		t.Fatalf("expected fallback to en/\"Coffee House\", got: %+v", got.Locale)
	}

	// 3) Update uk —á–µ—Ä–µ–∑ PlaceLocalesQ.Update
	newName := "–ö–∞–≤ º—è—Ä–Ω—è (–æ–Ω–æ–≤–ª–µ–Ω–æ)"
	newAddr := "–≤—É–ª. –û–Ω–æ–≤–ª–µ–Ω–∞, 5"
	newDesc := sql.NullString{Valid: true, String: "–û–Ω–æ–≤–ª–µ–Ω–∏–π –æ–ø–∏—Å"}

	if err := dbx.NewPlaceDetailsQ(db).
		FilterPlaceID(placeID).
		FilterByLocale("uk").
		Update(ctx, dbx.UpdatePlaceLocaleParams{
			Name:        &newName,
			Address:     &newAddr,
			Description: &newDesc,
			UpdatedAt:   time.Now().UTC(),
		}); err != nil {
		t.Fatalf("update uk: %v", err)
	}

	got, err = dbx.NewPlacesQ(db).WithLocale("uk").FilterByID(placeID).Get(ctx)
	if err != nil {
		t.Fatalf("get after update uk: %v", err)
	}
	if got.Locale.Name != newName || got.Locale.Address != newAddr || !got.Locale.Description.Valid || got.Locale.Description.String != newDesc.String {
		t.Fatalf("expected updated uk locale, got: %+v", got.Locale)
	}

	// 4) Delete uk ‚Üí fallback –Ω–∞ en
	if err := dbx.NewPlaceDetailsQ(db).FilterPlaceID(placeID).FilterByLocale("uk").Delete(ctx); err != nil {
		t.Fatalf("delete uk: %v", err)
	}
	got, err = dbx.NewPlacesQ(db).WithLocale("uk").FilterByID(placeID).Get(ctx)
	if err != nil {
		t.Fatalf("get after delete uk: %v", err)
	}
	if got.Locale.Locale != "en" || got.Locale.Name != "Coffee House" {
		t.Fatalf("expected fallback en after delete uk, got: %+v", got.Locale)
	}

	// 5) Delete en —Ç–æ–∂–µ ‚Üí —Ç–µ–ø–µ—Ä—å –Ω–µ—Ç –Ω–∏ —Ç–æ—á–Ω–æ–≥–æ, –Ω–∏ fallback ‚Üí –ø—É—Å—Ç—ã–µ –ª–æ–∫–∞–ª–∏
	if err := dbx.NewPlaceDetailsQ(db).FilterPlaceID(placeID).FilterByLocale("en").Delete(ctx); err != nil {
		t.Fatalf("delete en: %v", err)
	}
	got, err = dbx.NewPlacesQ(db).WithLocale("fr").FilterByID(placeID).Get(ctx)
	if err != nil {
		t.Fatalf("get after delete en: %v", err)
	}
	if got.Locale.Locale != "" || got.Locale.Name != "" || got.Locale.Address != "" || got.Locale.Description.Valid {
		t.Fatalf("expected empty locale after all i18n deleted, got: %+v", got.Locale)
	}

	// 6) –ë–µ–∑ WithLocale –≤–æ–æ–±—â–µ ‚Üí –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—É—Å—Ç—ã–µ (–∑–∞–≥–ª—É—à–∫–∏ NULL AS loc_*)
	got, err = dbx.NewPlacesQ(db).FilterByID(placeID).Get(ctx)
	if err != nil {
		t.Fatalf("get without WithLocale: %v", err)
	}
	if got.Locale.Locale != "" || got.Locale.Name != "" || got.Locale.Address != "" || got.Locale.Description.Valid {
		t.Fatalf("expected empty locale without WithLocale, got: %+v", got.Locale)
	}
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ WithLocale –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã (locale –≤ args, –Ω–µ –≤ —Ç–µ–∫—Å—Ç–µ SQL).
func TestPlaces_WithLocale_SQL_IsParameterized(t *testing.T) {
	setupClean(t)
	insertBaseKindInfra(t)

	db := openDB(t)
	placeID := uuid.New()
	insertPlace(t, placeID)

	// en –ª–æ–∫–∞–ª—å
	insertPlaceLocale(t, placeID, "en", "Coffee House", "Main St 1", sql.NullString{Valid: true, String: "Cozy"})

	// –•–ï–õ–ü–ï–†: –¥–æ–±–∞–≤—å –≤ –ø–∞–∫–µ—Ç dbx –º–µ—Ç–æ–¥:
	// func (q PlacesQ) SelectorToSql() (string, []any, error) { return q.selector.ToSql() }
	sqlStr, args, err := dbx.NewPlacesQ(db).WithLocale("uk").FilterByID(placeID).SelectorToSql()
	if err != nil {
		t.Fatalf("ToSql(): %v", err)
	}

	t.Logf("SQL: %s", sqlStr)
	t.Logf("Args: %#v", args)

	if len(args) < 3 {
		t.Fatalf("expected at least 3 args, got %#v", args)
	}
	hasUK := false
	for _, a := range args {
		if s, ok := a.(string); ok && s == "uk" {
			hasUK = true
		}
	}
	if !hasUK {
		t.Fatalf(`expected "uk" among args, got %#v`, args)
	}
}

// 1) –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –ª–æ–∫–∞–ª—å ‚Üí sanitize –¥–æ en. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ WithLocale("xx-!!") –≤–µ—Ä–Ω—ë—Ç EN.
func TestPlaces_InvalidLocale_SanitizedToEN(t *testing.T) {
	db, ctx, placeID := setupPlaceWithInfra(t)

	// —Ç–æ–ª—å–∫–æ EN
	insertPlaceLocale(t, placeID, "en", "Coffee House", "Main St 1", sql.NullString{Valid: true, String: "Cozy place"})

	got, err := dbx.NewPlacesQ(db).WithLocale("xx-!!").FilterByID(placeID).Get(ctx)
	if err != nil {
		t.Fatalf("get with invalid locale: %v", err)
	}
	if got.Locale.Locale != "en" || got.Locale.Name != "Coffee House" || got.Locale.Address != "Main St 1" || !got.Locale.Description.Valid || got.Locale.Description.String != "Cozy place" {
		t.Fatalf("expected sanitized to en fallback, got: %+v", got.Locale)
	}
}

//  2. –ß–∞—Å—Ç–∏—á–Ω–æ –∑–∞–ø–æ–ª–Ω—ë–Ω–Ω–∞—è –ª–æ–∫–∞–ª—å: uk –µ—Å—Ç—å, –Ω–æ description = NULL.
//     –î–æ–ª–∂–Ω—ã –ø–æ–ª—É—á–∏—Ç—å uk.name/uk.address –∏ NULL description (–ù–ï –ø–æ–¥—Ç—è–≥–∏–≤–∞—Ç—å en.description!)
func TestPlaces_PartialLocale_NoFieldMixing(t *testing.T) {
	db, ctx, placeID := setupPlaceWithInfra(t)

	// EN (–ø–æ–ª–Ω–∞—è)
	insertPlaceLocale(t, placeID, "en", "Coffee House", "Main St 1", sql.NullString{Valid: true, String: "Cozy place"})
	// UK (–±–µ–∑ description)
	insertPlaceLocale(t, placeID, "uk", "–ö–∞–≤ º—è—Ä–Ω—è", "–≤—É–ª. –ì–æ–ª–æ–≤–Ω–∞, 1", sql.NullString{Valid: false})

	got, err := dbx.NewPlacesQ(db).WithLocale("uk").FilterByID(placeID).Get(ctx)
	if err != nil {
		t.Fatalf("get with uk: %v", err)
	}
	if got.Locale.Locale != "uk" {
		t.Fatalf("expected uk locale, got: %q", got.Locale.Locale)
	}
	if got.Locale.Name != "–ö–∞–≤ º—è—Ä–Ω—è" || got.Locale.Address != "–≤—É–ª. –ì–æ–ª–æ–≤–Ω–∞, 1" {
		t.Fatalf("expected uk name/address, got: %+v", got.Locale)
	}
	if got.Locale.Description.Valid {
		t.Fatalf("expected uk.description = NULL (no mixing from en), got: %+v", got.Locale.Description)
	}
}

//  3. –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ (FilterNameLike) c JOIN –∏ DISTINCT: –¥–≤–∞ –ø–ª–µ–π—Å–∞,
//     –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∏—Å–∫ –ø–æ –ø–æ–¥—Å—Ç—Ä–æ–∫–µ –¥–∞—ë—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–∞–±–æ—Ä –±–µ–∑ –¥—É–±–ª–µ–π.
func TestPlaces_FilterNameLike_Distinct(t *testing.T) {
	db, ctx, p1 := setupPlaceWithInfra(t)
	p2 := uuid.New()
	insertPlace(t, p2)

	// p1: en "Coffee House"
	insertPlaceLocale(t, p1, "en", "Coffee House", "Main St 1", sql.NullString{})
	// p2: en "Coffee Corner"
	insertPlaceLocale(t, p2, "en", "Coffee Corner", "Second St 2", sql.NullString{})

	// –Ω–∞–π–¥—ë–º –ø–æ "Coffee"
	list, err := dbx.NewPlacesQ(db).
		WithLocale("en").
		FilterNameLike("Coffee").
		Select(ctx)
	if err != nil {
		t.Fatalf("select with name like: %v", err)
	}
	// –±–µ–∑ –¥—É–±–ª–µ–π –∏ –æ–±–∞ –ø–æ–ø–∞–ª–∏
	found := map[uuid.UUID]bool{}
	for _, it := range list {
		found[it.ID] = true
	}
	if !found[p1] || !found[p2] || len(list) != 2 {
		t.Fatalf("expected both places (no duplicates). got=%v, ids=%v", len(list), found)
	}
}

// 4) –ù–µ—Ç EN –∏ –Ω–µ—Ç exact ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é –ª–æ–∫–∞–ª—å (–Ω–µ —Ñ–æ–ª–±—ç—á–∏–º –Ω–∞ ¬´–∫–∞–∫—É—é-—Ç–æ¬ª –¥—Ä—É–≥—É—é).
func TestPlaces_Fallback_NoEN_NoExact_ReturnsEmptyLocale(t *testing.T) {
	db, ctx, placeID := setupPlaceWithInfra(t)

	// –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ FR
	insertPlaceLocale(t, placeID, "fr", "Maison du Caf√©", "Rue Principale 1", sql.NullString{})

	// –∑–∞–ø—Ä–æ—Å–∏–º DE ‚Üí –Ω–∏ exact (de), –Ω–∏ en –Ω–µ—Ç ‚Üí –æ–∂–∏–¥–∞–µ–º –ø—É—Å—Ç—ã–µ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—è
	got, err := dbx.NewPlacesQ(db).WithLocale("de").FilterByID(placeID).Get(ctx)
	if err != nil {
		t.Fatalf("get with de (no en, no exact): %v", err)
	}
	if got.Locale.Locale != "" || got.Locale.Name != "" || got.Locale.Address != "" || got.Locale.Description.Valid {
		t.Fatalf("expected empty locale (no en & no exact), got: %+v", got.Locale)
	}
}

// 5) –ï—Å—Ç—å —Ç–æ–ª—å–∫–æ –¥—Ä—É–≥–∞—è –ª–æ–∫–∞–ª—å: exact —Ä–∞–±–æ—Ç–∞–µ—Ç, –∞ –≤–æ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ en ‚Äî –ø—É—Å—Ç–æ.
func TestPlaces_OnlyOtherLocale_ExactVsEmpty(t *testing.T) {
	db, ctx, placeID := setupPlaceWithInfra(t)

	// –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ FR
	insertPlaceLocale(t, placeID, "fr", "Maison du Caf√©", "Rue Principale 1", sql.NullString{Valid: true, String: "Sympa"})

	// exact: WithLocale("fr") ‚Üí –≤–µ—Ä–Ω—ë—Ç—Å—è fr
	got, err := dbx.NewPlacesQ(db).WithLocale("fr").FilterByID(placeID).Get(ctx)
	if err != nil {
		t.Fatalf("get with fr: %v", err)
	}
	if got.Locale.Locale != "fr" || got.Locale.Name != "Maison du Caf√©" || got.Locale.Address != "Rue Principale 1" || !got.Locale.Description.Valid || got.Locale.Description.String != "Sympa" {
		t.Fatalf("expected exact fr, got: %+v", got.Locale)
	}

	// –¥—Ä—É–≥–∞—è: WithLocale("uk") ‚Üí –Ω–∏ exact (uk), –Ω–∏ en ‚Üí –ø—É—Å—Ç—ã–µ –ª–æ–∫–∞–ª–∏
	got, err = dbx.NewPlacesQ(db).WithLocale("uk").FilterByID(placeID).Get(ctx)
	if err != nil {
		t.Fatalf("get with uk (no en): %v", err)
	}
	if got.Locale.Locale != "" || got.Locale.Name != "" || got.Locale.Address != "" || got.Locale.Description.Valid {
		t.Fatalf("expected empty locale (no en & no exact), got: %+v", got.Locale)
	}
}
