/*
Cifra SSO REST API

SSO REST API for Cifra domain

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TimetableDataAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TimetableDataAttributes{}

// TimetableDataAttributes struct for TimetableDataAttributes
type TimetableDataAttributes struct {
	// timetable table
	Table []TimetableInterval `json:"table"`
}

type _TimetableDataAttributes TimetableDataAttributes

// NewTimetableDataAttributes instantiates a new TimetableDataAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimetableDataAttributes(table []TimetableInterval) *TimetableDataAttributes {
	this := TimetableDataAttributes{}
	this.Table = table
	return &this
}

// NewTimetableDataAttributesWithDefaults instantiates a new TimetableDataAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimetableDataAttributesWithDefaults() *TimetableDataAttributes {
	this := TimetableDataAttributes{}
	return &this
}

// GetTable returns the Table field value
func (o *TimetableDataAttributes) GetTable() []TimetableInterval {
	if o == nil {
		var ret []TimetableInterval
		return ret
	}

	return o.Table
}

// GetTableOk returns a tuple with the Table field value
// and a boolean to check if the value has been set.
func (o *TimetableDataAttributes) GetTableOk() ([]TimetableInterval, bool) {
	if o == nil {
		return nil, false
	}
	return o.Table, true
}

// SetTable sets field value
func (o *TimetableDataAttributes) SetTable(v []TimetableInterval) {
	o.Table = v
}

func (o TimetableDataAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TimetableDataAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["table"] = o.Table
	return toSerialize, nil
}

func (o *TimetableDataAttributes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"table",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTimetableDataAttributes := _TimetableDataAttributes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTimetableDataAttributes)

	if err != nil {
		return err
	}

	*o = TimetableDataAttributes(varTimetableDataAttributes)

	return err
}

type NullableTimetableDataAttributes struct {
	value *TimetableDataAttributes
	isSet bool
}

func (v NullableTimetableDataAttributes) Get() *TimetableDataAttributes {
	return v.value
}

func (v *NullableTimetableDataAttributes) Set(val *TimetableDataAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableTimetableDataAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableTimetableDataAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimetableDataAttributes(val *TimetableDataAttributes) *NullableTimetableDataAttributes {
	return &NullableTimetableDataAttributes{value: val, isSet: true}
}

func (v NullableTimetableDataAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimetableDataAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


