/*
Cifra SSO REST API

SSO REST API for Cifra domain

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PlacesCollection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlacesCollection{}

// PlacesCollection struct for PlacesCollection
type PlacesCollection struct {
	Data []PlaceData `json:"data"`
	Included []TimetableData `json:"included"`
	Links PaginationData `json:"links"`
}

type _PlacesCollection PlacesCollection

// NewPlacesCollection instantiates a new PlacesCollection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlacesCollection(data []PlaceData, included []TimetableData, links PaginationData) *PlacesCollection {
	this := PlacesCollection{}
	this.Data = data
	this.Included = included
	this.Links = links
	return &this
}

// NewPlacesCollectionWithDefaults instantiates a new PlacesCollection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlacesCollectionWithDefaults() *PlacesCollection {
	this := PlacesCollection{}
	return &this
}

// GetData returns the Data field value
func (o *PlacesCollection) GetData() []PlaceData {
	if o == nil {
		var ret []PlaceData
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *PlacesCollection) GetDataOk() ([]PlaceData, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *PlacesCollection) SetData(v []PlaceData) {
	o.Data = v
}

// GetIncluded returns the Included field value
func (o *PlacesCollection) GetIncluded() []TimetableData {
	if o == nil {
		var ret []TimetableData
		return ret
	}

	return o.Included
}

// GetIncludedOk returns a tuple with the Included field value
// and a boolean to check if the value has been set.
func (o *PlacesCollection) GetIncludedOk() ([]TimetableData, bool) {
	if o == nil {
		return nil, false
	}
	return o.Included, true
}

// SetIncluded sets field value
func (o *PlacesCollection) SetIncluded(v []TimetableData) {
	o.Included = v
}

// GetLinks returns the Links field value
func (o *PlacesCollection) GetLinks() PaginationData {
	if o == nil {
		var ret PaginationData
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *PlacesCollection) GetLinksOk() (*PaginationData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Links, true
}

// SetLinks sets field value
func (o *PlacesCollection) SetLinks(v PaginationData) {
	o.Links = v
}

func (o PlacesCollection) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlacesCollection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	toSerialize["included"] = o.Included
	toSerialize["links"] = o.Links
	return toSerialize, nil
}

func (o *PlacesCollection) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
		"included",
		"links",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPlacesCollection := _PlacesCollection{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPlacesCollection)

	if err != nil {
		return err
	}

	*o = PlacesCollection(varPlacesCollection)

	return err
}

type NullablePlacesCollection struct {
	value *PlacesCollection
	isSet bool
}

func (v NullablePlacesCollection) Get() *PlacesCollection {
	return v.value
}

func (v *NullablePlacesCollection) Set(val *PlacesCollection) {
	v.value = val
	v.isSet = true
}

func (v NullablePlacesCollection) IsSet() bool {
	return v.isSet
}

func (v *NullablePlacesCollection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlacesCollection(val *PlacesCollection) *NullablePlacesCollection {
	return &NullablePlacesCollection{value: val, isSet: true}
}

func (v NullablePlacesCollection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlacesCollection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


