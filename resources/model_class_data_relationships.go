/*
Cifra SSO REST API

SSO REST API for Cifra app

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ClassDataRelationships type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClassDataRelationships{}

// ClassDataRelationships struct for ClassDataRelationships
type ClassDataRelationships struct {
	Parent ClassDataRelationshipsParent `json:"parent"`
}

type _ClassDataRelationships ClassDataRelationships

// NewClassDataRelationships instantiates a new ClassDataRelationships object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClassDataRelationships(parent ClassDataRelationshipsParent) *ClassDataRelationships {
	this := ClassDataRelationships{}
	this.Parent = parent
	return &this
}

// NewClassDataRelationshipsWithDefaults instantiates a new ClassDataRelationships object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClassDataRelationshipsWithDefaults() *ClassDataRelationships {
	this := ClassDataRelationships{}
	return &this
}

// GetParent returns the Parent field value
func (o *ClassDataRelationships) GetParent() ClassDataRelationshipsParent {
	if o == nil {
		var ret ClassDataRelationshipsParent
		return ret
	}

	return o.Parent
}

// GetParentOk returns a tuple with the Parent field value
// and a boolean to check if the value has been set.
func (o *ClassDataRelationships) GetParentOk() (*ClassDataRelationshipsParent, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Parent, true
}

// SetParent sets field value
func (o *ClassDataRelationships) SetParent(v ClassDataRelationshipsParent) {
	o.Parent = v
}

func (o ClassDataRelationships) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClassDataRelationships) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["parent"] = o.Parent
	return toSerialize, nil
}

func (o *ClassDataRelationships) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"parent",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varClassDataRelationships := _ClassDataRelationships{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varClassDataRelationships)

	if err != nil {
		return err
	}

	*o = ClassDataRelationships(varClassDataRelationships)

	return err
}

type NullableClassDataRelationships struct {
	value *ClassDataRelationships
	isSet bool
}

func (v NullableClassDataRelationships) Get() *ClassDataRelationships {
	return v.value
}

func (v *NullableClassDataRelationships) Set(val *ClassDataRelationships) {
	v.value = val
	v.isSet = true
}

func (v NullableClassDataRelationships) IsSet() bool {
	return v.isSet
}

func (v *NullableClassDataRelationships) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClassDataRelationships(val *ClassDataRelationships) *NullableClassDataRelationships {
	return &NullableClassDataRelationships{value: val, isSet: true}
}

func (v NullableClassDataRelationships) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClassDataRelationships) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


