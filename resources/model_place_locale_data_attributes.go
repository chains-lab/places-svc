/*
Cifra SSO REST API

SSO REST API for Cifra app

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PlaceLocaleDataAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlaceLocaleDataAttributes{}

// PlaceLocaleDataAttributes struct for PlaceLocaleDataAttributes
type PlaceLocaleDataAttributes struct {
	// Locale name
	Name string `json:"name"`
	// Locale address
	Address string `json:"address"`
	// Locale description
	Description *string `json:"description,omitempty"`
}

type _PlaceLocaleDataAttributes PlaceLocaleDataAttributes

// NewPlaceLocaleDataAttributes instantiates a new PlaceLocaleDataAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlaceLocaleDataAttributes(name string, address string) *PlaceLocaleDataAttributes {
	this := PlaceLocaleDataAttributes{}
	this.Name = name
	this.Address = address
	return &this
}

// NewPlaceLocaleDataAttributesWithDefaults instantiates a new PlaceLocaleDataAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlaceLocaleDataAttributesWithDefaults() *PlaceLocaleDataAttributes {
	this := PlaceLocaleDataAttributes{}
	return &this
}

// GetName returns the Name field value
func (o *PlaceLocaleDataAttributes) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PlaceLocaleDataAttributes) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PlaceLocaleDataAttributes) SetName(v string) {
	o.Name = v
}

// GetAddress returns the Address field value
func (o *PlaceLocaleDataAttributes) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *PlaceLocaleDataAttributes) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *PlaceLocaleDataAttributes) SetAddress(v string) {
	o.Address = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PlaceLocaleDataAttributes) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaceLocaleDataAttributes) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PlaceLocaleDataAttributes) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PlaceLocaleDataAttributes) SetDescription(v string) {
	o.Description = &v
}

func (o PlaceLocaleDataAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlaceLocaleDataAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["address"] = o.Address
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	return toSerialize, nil
}

func (o *PlaceLocaleDataAttributes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"address",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPlaceLocaleDataAttributes := _PlaceLocaleDataAttributes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPlaceLocaleDataAttributes)

	if err != nil {
		return err
	}

	*o = PlaceLocaleDataAttributes(varPlaceLocaleDataAttributes)

	return err
}

type NullablePlaceLocaleDataAttributes struct {
	value *PlaceLocaleDataAttributes
	isSet bool
}

func (v NullablePlaceLocaleDataAttributes) Get() *PlaceLocaleDataAttributes {
	return v.value
}

func (v *NullablePlaceLocaleDataAttributes) Set(val *PlaceLocaleDataAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullablePlaceLocaleDataAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullablePlaceLocaleDataAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlaceLocaleDataAttributes(val *PlaceLocaleDataAttributes) *NullablePlaceLocaleDataAttributes {
	return &NullablePlaceLocaleDataAttributes{value: val, isSet: true}
}

func (v NullablePlaceLocaleDataAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlaceLocaleDataAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


