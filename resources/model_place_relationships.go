/*
Cifra SSO REST API

SSO REST API for Cifra app

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PlaceRelationships type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlaceRelationships{}

// PlaceRelationships struct for PlaceRelationships
type PlaceRelationships struct {
	Class ClassDataRelationshipsParent `json:"class"`
	City PlaceRelationshipsCity `json:"city"`
	Distributor *ClassDataRelationshipsParent `json:"distributor,omitempty"`
}

type _PlaceRelationships PlaceRelationships

// NewPlaceRelationships instantiates a new PlaceRelationships object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlaceRelationships(class ClassDataRelationshipsParent, city PlaceRelationshipsCity) *PlaceRelationships {
	this := PlaceRelationships{}
	this.Class = class
	this.City = city
	return &this
}

// NewPlaceRelationshipsWithDefaults instantiates a new PlaceRelationships object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlaceRelationshipsWithDefaults() *PlaceRelationships {
	this := PlaceRelationships{}
	return &this
}

// GetClass returns the Class field value
func (o *PlaceRelationships) GetClass() ClassDataRelationshipsParent {
	if o == nil {
		var ret ClassDataRelationshipsParent
		return ret
	}

	return o.Class
}

// GetClassOk returns a tuple with the Class field value
// and a boolean to check if the value has been set.
func (o *PlaceRelationships) GetClassOk() (*ClassDataRelationshipsParent, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Class, true
}

// SetClass sets field value
func (o *PlaceRelationships) SetClass(v ClassDataRelationshipsParent) {
	o.Class = v
}

// GetCity returns the City field value
func (o *PlaceRelationships) GetCity() PlaceRelationshipsCity {
	if o == nil {
		var ret PlaceRelationshipsCity
		return ret
	}

	return o.City
}

// GetCityOk returns a tuple with the City field value
// and a boolean to check if the value has been set.
func (o *PlaceRelationships) GetCityOk() (*PlaceRelationshipsCity, bool) {
	if o == nil {
		return nil, false
	}
	return &o.City, true
}

// SetCity sets field value
func (o *PlaceRelationships) SetCity(v PlaceRelationshipsCity) {
	o.City = v
}

// GetDistributor returns the Distributor field value if set, zero value otherwise.
func (o *PlaceRelationships) GetDistributor() ClassDataRelationshipsParent {
	if o == nil || IsNil(o.Distributor) {
		var ret ClassDataRelationshipsParent
		return ret
	}
	return *o.Distributor
}

// GetDistributorOk returns a tuple with the Distributor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaceRelationships) GetDistributorOk() (*ClassDataRelationshipsParent, bool) {
	if o == nil || IsNil(o.Distributor) {
		return nil, false
	}
	return o.Distributor, true
}

// HasDistributor returns a boolean if a field has been set.
func (o *PlaceRelationships) HasDistributor() bool {
	if o != nil && !IsNil(o.Distributor) {
		return true
	}

	return false
}

// SetDistributor gets a reference to the given ClassDataRelationshipsParent and assigns it to the Distributor field.
func (o *PlaceRelationships) SetDistributor(v ClassDataRelationshipsParent) {
	o.Distributor = &v
}

func (o PlaceRelationships) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlaceRelationships) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["class"] = o.Class
	toSerialize["city"] = o.City
	if !IsNil(o.Distributor) {
		toSerialize["distributor"] = o.Distributor
	}
	return toSerialize, nil
}

func (o *PlaceRelationships) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"class",
		"city",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPlaceRelationships := _PlaceRelationships{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPlaceRelationships)

	if err != nil {
		return err
	}

	*o = PlaceRelationships(varPlaceRelationships)

	return err
}

type NullablePlaceRelationships struct {
	value *PlaceRelationships
	isSet bool
}

func (v NullablePlaceRelationships) Get() *PlaceRelationships {
	return v.value
}

func (v *NullablePlaceRelationships) Set(val *PlaceRelationships) {
	v.value = val
	v.isSet = true
}

func (v NullablePlaceRelationships) IsSet() bool {
	return v.isSet
}

func (v *NullablePlaceRelationships) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlaceRelationships(val *PlaceRelationships) *NullablePlaceRelationships {
	return &NullablePlaceRelationships{value: val, isSet: true}
}

func (v NullablePlaceRelationships) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlaceRelationships) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


