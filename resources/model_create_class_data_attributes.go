/*
Cifra SSO REST API

SSO REST API for Cifra domain

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateClassDataAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateClassDataAttributes{}

// CreateClassDataAttributes struct for CreateClassDataAttributes
type CreateClassDataAttributes struct {
	// class icon
	Icon string `json:"icon"`
	// class name at english
	Name string `json:"name"`
	// parent class code
	Parent *string `json:"parent,omitempty"`
}

type _CreateClassDataAttributes CreateClassDataAttributes

// NewCreateClassDataAttributes instantiates a new CreateClassDataAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateClassDataAttributes(icon string, name string) *CreateClassDataAttributes {
	this := CreateClassDataAttributes{}
	this.Icon = icon
	this.Name = name
	return &this
}

// NewCreateClassDataAttributesWithDefaults instantiates a new CreateClassDataAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateClassDataAttributesWithDefaults() *CreateClassDataAttributes {
	this := CreateClassDataAttributes{}
	var name string = "New Class"
	this.Name = name
	return &this
}

// GetIcon returns the Icon field value
func (o *CreateClassDataAttributes) GetIcon() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Icon
}

// GetIconOk returns a tuple with the Icon field value
// and a boolean to check if the value has been set.
func (o *CreateClassDataAttributes) GetIconOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Icon, true
}

// SetIcon sets field value
func (o *CreateClassDataAttributes) SetIcon(v string) {
	o.Icon = v
}

// GetName returns the Name field value
func (o *CreateClassDataAttributes) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateClassDataAttributes) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateClassDataAttributes) SetName(v string) {
	o.Name = v
}

// GetParent returns the Parent field value if set, zero value otherwise.
func (o *CreateClassDataAttributes) GetParent() string {
	if o == nil || IsNil(o.Parent) {
		var ret string
		return ret
	}
	return *o.Parent
}

// GetParentOk returns a tuple with the Parent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateClassDataAttributes) GetParentOk() (*string, bool) {
	if o == nil || IsNil(o.Parent) {
		return nil, false
	}
	return o.Parent, true
}

// HasParent returns a boolean if a field has been set.
func (o *CreateClassDataAttributes) HasParent() bool {
	if o != nil && !IsNil(o.Parent) {
		return true
	}

	return false
}

// SetParent gets a reference to the given string and assigns it to the Parent field.
func (o *CreateClassDataAttributes) SetParent(v string) {
	o.Parent = &v
}

func (o CreateClassDataAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateClassDataAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["icon"] = o.Icon
	toSerialize["name"] = o.Name
	if !IsNil(o.Parent) {
		toSerialize["parent"] = o.Parent
	}
	return toSerialize, nil
}

func (o *CreateClassDataAttributes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"icon",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateClassDataAttributes := _CreateClassDataAttributes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateClassDataAttributes)

	if err != nil {
		return err
	}

	*o = CreateClassDataAttributes(varCreateClassDataAttributes)

	return err
}

type NullableCreateClassDataAttributes struct {
	value *CreateClassDataAttributes
	isSet bool
}

func (v NullableCreateClassDataAttributes) Get() *CreateClassDataAttributes {
	return v.value
}

func (v *NullableCreateClassDataAttributes) Set(val *CreateClassDataAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateClassDataAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateClassDataAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateClassDataAttributes(val *CreateClassDataAttributes) *NullableCreateClassDataAttributes {
	return &NullableCreateClassDataAttributes{value: val, isSet: true}
}

func (v NullableCreateClassDataAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateClassDataAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


